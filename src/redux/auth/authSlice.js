// Import action creators from the './operations' file
import { login, logout, refresh, register } from './operations';

// Destructure the createSlice function from the '@reduxjs/toolkit' library
const { createSlice } = require('@reduxjs/toolkit');

// Define a function to handle rejected actions
const handleRejected = (state, action) => {
  // Set authentication loading to false and update the authentication error
  state.isAuthLoading = false;
  state.authError = action.payload;
};

// Define the initial state for the authentication slice
const initialState = {
  user: { name: null, email: null },
  token: null,
  isLoggedIn: false,
  isRefreshing: false,

  isAuthLoading: false,
  authError: null,
};

// Create the authentication slice using createSlice
const authSlice = createSlice({
  // Specify the name of the slice
  name: 'auth',

  // Provide the initial state
  initialState,

  // Specify extra reducers for handling asynchronous actions
  extraReducers: builder => {
    // Handling registration actions
    builder
      .addCase(register.pending, state => {
        state.isAuthLoading = 'register';
      })
      .addCase(register.fulfilled, (state, { payload }) => {
        state.user = payload.user;
        state.token = payload.token;
        state.isLoggedIn = true;
        state.isAuthLoading = false;
        state.authError = null;
      })
      .addCase(register.rejected, handleRejected)

      // Handling login actions
      .addCase(login.pending, state => {
        state.isAuthLoading = 'login';
      })
      .addCase(login.fulfilled, (state, { payload }) => {
        state.user = payload.user;
        state.token = payload.token;
        state.isLoggedIn = true;
        state.isAuthLoading = false;
        state.authError = null;
      })
      .addCase(login.rejected, handleRejected)

      // Handling logout actions
      .addCase(logout.pending, state => {
        state.isAuthLoading = 'logout';
      })
      .addCase(logout.fulfilled, state => {
        state.user = { name: null, email: null };
        state.token = null;
        state.isLoggedIn = false;
        state.isAuthLoading = false;
        state.authError = null;
      })
      .addCase(logout.rejected, handleRejected)

      // Handling token refresh actions
      .addCase(refresh.pending, state => {
        state.isRefreshing = true;
        state.isAuthLoading = 'refresh';
      })
      .addCase(refresh.fulfilled, (state, { payload }) => {
        state.user = payload;
        state.isLoggedIn = true;
        state.isRefreshing = false;
        state.isAuthLoading = false;
        state.authError = null;
      })
      .addCase(refresh.rejected, (state, { payload }) => {
        state.isRefreshing = false;
        state.isAuthLoading = false;
      });
  },
});

// Export the reducer generated by createSlice
export const authReducer = authSlice.reducer;
