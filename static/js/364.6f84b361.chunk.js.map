{"version":3,"file":"static/js/364.6f84b361.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Modal/Modal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/Edit.js"],"sourcesContent":["// Selectors for managing contacts using createSelector from @reduxjs/toolkit\nimport { createSelector } from '@reduxjs/toolkit';\n\n// Select the contacts items from the state\nexport const selectContacts = state => state.contacts.items;\n\n// Select the filter value from the state\nexport const selectFilter = state => state.filter.filter;\n\n// Select the loading state from the state\nexport const selectIsLoading = state => state.contacts.isLoading;\n\n// Select the error state from the state\nexport const selectError = state => state.contacts.error;\n\n// Select visible contacts based on the filter value\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    // Normalize the filter value to lowercase for case-insensitive comparison\n    const normalizeFilter = filter.toLowerCase();\n\n    // Filter and sort contacts based on the normalized filter value\n    return contacts\n      .filter(contact => contact.name.toLowerCase().includes(normalizeFilter))\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n);\n","// Import necessary dependencies and components\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Box, Button, Container, TextField } from '@mui/material';\nimport { Loader } from 'components/Loader/Loader';\n\n// Define the ContactForm functional component\nexport const ContactForm = () => {\n  // Redux setup: dispatch, selectContacts, and selectIsLoading from the store\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const operation = useSelector(selectIsLoading);\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Extract values from the form\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    // Check if the contact name already exists\n    const newName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (newName) {\n      Notify.warning(`${name} is already in contacts`);\n      return;\n    }\n\n    // Check for empty fields\n    if (name === '' || number === '') {\n      Notify.warning('Fields cannot be empty!');\n      return;\n    }\n\n    try {\n      // Dispatch the addContact operation and display success notification\n      await dispatch(addContact({ name: name, number: number })).unwrap();\n      Notify.success(`${name} was added to your contacts`);\n      form.reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // JSX structure for the ContactForm component\n  return (\n    <Container\n      maxWidth=\"xs\"\n      sx={{\n        p: 4,\n        mb: 4,\n        bgcolor: '#ffffff',\n        borderRadius: '10px',\n        boxShadow: 3,\n      }}\n    >\n      <Box\n        component=\"form\"\n        autoComplete=\"off\"\n        noValidate\n        onSubmit={handleSubmit}\n      >\n        {/* Text field for entering contact name */}\n        <TextField\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          size=\"small\"\n        />\n\n        {/* Text field for entering contact phone number */}\n        <TextField\n          margin=\"normal\"\n          required\n          fullWidth\n          type=\"tel\"\n          id=\"number\"\n          label=\"Phone Number\"\n          name=\"number\"\n          size=\"small\"\n        />\n\n        {/* Button for submitting the form, with conditional rendering based on the loading operation */}\n        <Button\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n          sx={{ mt: 2, mb: 2 }}\n          size=\"medium\"\n        >\n          {operation === 'add' ? <Loader /> : <>Add contact</>}\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n","// Import necessary dependencies and components\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Container, TextField, Typography } from '@mui/material';\n\n// Define the Filter functional component\nexport const Filter = () => {\n  // Select filter value and dispatch function from the store\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  // Handle change in the filter input\n  const handleChangeFilter = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  // JSX structure for the Filter component\n  return (\n    <Container maxWidth=\"sm\">\n      {/* Display filter instruction */}\n      <Typography sx={{ mb: 1 }} fontSize=\"22px\" color=\"#212121\" paragraph>\n        Find contacts by name:\n      </Typography>\n\n      {/* Filter input field */}\n      <TextField\n        sx={{ my: 0.5 }}\n        margin=\"normal\"\n        fullWidth\n        name=\"filter\"\n        value={filter}\n        size=\"small\"\n        onChange={handleChangeFilter}\n      />\n    </Container>\n  );\n};\n","// Import necessary dependencies and components\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Grid, TextField } from '@mui/material';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\n\n// Style definition for the modal\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4,\n  borderRadius: '10px',\n};\n\n// Define the EditModal functional component\nexport const EditModal = ({ isOpen, id, name, number, onClose }) => {\n  // Define state variables using React hooks\n  const [contactName, setContactName] = React.useState(name);\n  const [contactNumber, setContactNumber] = React.useState(number);\n\n  // Define dispatch, operation, and contacts using React hooks\n  const dispatch = useDispatch();\n  const operation = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  // Handle edit submission\n  const handleEdit = async e => {\n    e.preventDefault();\n\n    // Check if the edited name and number already exist in contacts\n    const EditName = contacts.some(\n      contact => contact.name.toLowerCase() === contactName.toLowerCase()\n    );\n    const EditNumber = contacts.some(\n      contact => contact.number === contactNumber\n    );\n\n    // Show error notification if the edited contact already exists\n    if (EditName && EditNumber) {\n      Notify.error(`${contactName} is already in contacts`);\n      return;\n    }\n\n    // Show warning notification if fields are empty\n    if (contactName === '' || contactNumber === '') {\n      Notify.warning('Fields cannot be empty!');\n      return;\n    }\n\n    try {\n      // Dispatch updateContact action with edited contact details\n      await dispatch(\n        updateContact({\n          name: contactName,\n          number: contactNumber,\n          contactId: id,\n        })\n      ).unwrap();\n      Notify.success(`${name} contact was changed`);\n      onClose();\n    } catch (error) {\n      console.log(error);\n      Notify.warning('Ooops!..Something went wrong! Please try again later');\n    }\n  };\n\n  // JSX structure for the EditModal component\n  return (\n    <div>\n      <Modal\n        open={isOpen}\n        onClose={onClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={{ ...style, width: { xs: 240, sm: 400 } }}>\n          <Box\n            component=\"form\"\n            autoComplete=\"off\"\n            noValidate\n            onSubmit={handleEdit}\n          >\n            {/* Name input field */}\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"name\"\n              label=\"Name\"\n              name=\"name\"\n              value={contactName}\n              onChange={({ target: { value } }) => setContactName(value)}\n            />\n\n            {/* Phone number input field */}\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              type=\"tel\"\n              id=\"number\"\n              label=\"Phone Number\"\n              name=\"number\"\n              value={contactNumber}\n              onChange={({ target: { value } }) => setContactNumber(value)}\n            />\n\n            {/* Save and Cancel buttons */}\n            <Grid container justifyContent=\"center\">\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                sx={{ mt: 2, mb: 2, mr: 2 }}\n              >\n                {operation === 'update' ? <Loader /> : <>Save</>}\n              </Button>\n              <Button\n                type=\"button\"\n                size=\"medium\"\n                variant=\"outlined\"\n                sx={{ mt: 2, mb: 2 }}\n                onClick={onClose}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Box>\n        </Box>\n      </Modal>\n    </div>\n  );\n};\n\n// PropTypes for EditModal component\nEditModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// Import necessary dependencies and components\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { useState } from 'react';\nimport { EditModal } from 'components/Modal/Modal';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader/Loader';\n\n// Define the ContactItem functional component\nexport const ContactItem = ({ id, name, number }) => {\n  // Redux setup: dispatch and selectIsLoading from the store\n  const dispatch = useDispatch();\n  const [isShowModal, setIsShowModal] = useState(false);\n  const operation = useSelector(selectIsLoading);\n\n  // Handle contact deletion\n  const handleDelete = async () => {\n    try {\n      await dispatch(deleteContact(id)).unwrap();\n      Notify.success(`${name} was deleted from contacts`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Toggle the visibility of the edit modal\n  const toggleModal = () => setIsShowModal(prev => !prev);\n\n  // JSX structure for the ContactItem component\n  return (\n    <>\n      <Grid\n        container\n        sx={{ mb: { xs: 4, sm: 4, md: 1 } }}\n        spacing={1}\n        columns={{ xs: 12, sm: 12, md: 16 }}\n      >\n        {/* Display contact name */}\n        <Grid item xs={12} sm={6} md={6}>\n          <Typography\n            paragraph\n            sx={{\n              fontSize: {\n                xs: '16px',\n                sm: '18px',\n              },\n              textAlign: {\n                xs: 'center',\n                md: 'left',\n              },\n            }}\n            fontWeight=\"500\"\n            color=\"#212121\"\n          >\n            {name}\n          </Typography>\n        </Grid>\n\n        {/* Display contact phone number */}\n        <Grid item xs={12} sm={6} md={6}>\n          <Typography\n            sx={{\n              fontSize: {\n                xs: '16px',\n                sm: '18px',\n              },\n              textAlign: {\n                xs: 'center',\n                md: 'left',\n              },\n            }}\n            color=\"#757575\"\n            paragraph\n          >\n            {number}\n          </Typography>\n        </Grid>\n\n        {/* Delete button with loading state indicator */}\n        <Grid item xs={6} md>\n          <Button\n            type=\"button\"\n            variant=\"outlined\"\n            aria-label=\"delete\"\n            size=\"small\"\n            color=\"primary\"\n            startIcon={operation === id ? <Loader /> : <DeleteIcon />}\n            onClick={handleDelete}\n          >\n            {operation === id ? 'Deleting...' : 'Delete'}\n          </Button>\n        </Grid>\n\n        {/* Edit button */}\n        <Grid item xs={6} md>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            aria-label=\"edit\"\n            size=\"small\"\n            color=\"primary\"\n            startIcon={<EditIcon />}\n            onClick={toggleModal}\n          >\n            Edit\n          </Button>\n        </Grid>\n      </Grid>\n\n      {/* Render the EditModal component when isShowModal is true */}\n      {isShowModal && (\n        <EditModal\n          onClose={toggleModal}\n          id={id}\n          name={name}\n          number={number}\n          isOpen={isShowModal}\n        />\n      )}\n    </>\n  );\n};\n\n// Prop types for ContactItem component\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// Import necessary dependencies and components\nimport { useSelector } from 'react-redux';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { Container } from '@mui/material';\n\n// Define the ContactList functional component\nexport const ContactList = () => {\n  // Select visible contacts from the store\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  // JSX structure for the ContactList component\n  return (\n    <Container\n      maxWidth=\"md\"\n      sx={{\n        p: 4,\n        mt: 4,\n        bgcolor: '#ffffff',\n        borderRadius: '10px',\n        boxShadow: 3,\n      }}\n      component=\"ul\"\n    >\n      {/* Map through visibleContacts and render ContactItem component for each contact */}\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </Container>\n  );\n};\n","// Import necessary dependencies and components\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container, Typography } from '@mui/material';\nimport { Helmet } from 'react-helmet';\n\n// Define the Contacts component\nconst Contacts = () => {\n  // Retrieve data from the Redux store\n  const error = useSelector(selectError);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n  const operation = useSelector(selectIsLoading);\n\n  // Fetch contacts when the component mounts\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // Render the Contacts component\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"md\"\n      sx={{\n        marginTop: 3,\n        marginBottom: 3,\n        minHeight: '80vh',\n        textAlign: 'center',\n      }}\n    >\n      {/* Set the page title using Helmet */}\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n\n      {/* Phonebook title */}\n      <Typography\n        sx={{ mb: 3 }}\n        variant=\"h1\"\n        fontSize=\"44px\"\n        fontWeight=\"700\"\n        color=\"#1976d2\"\n        gutterBottom\n      >\n        Phonebook\n      </Typography>\n\n      {/* Contact form */}\n      <ContactForm />\n\n      {/* Contacts title */}\n      <Typography\n        sx={{ mb: 3 }}\n        variant=\"h2\"\n        fontSize=\"34px\"\n        fontWeight=\"500\"\n        color=\"#1976d2\"\n        gutterBottom\n      >\n        Contacts\n      </Typography>\n\n      {/* Filter for contacts */}\n      <Filter />\n\n      {/* Display loader if fetching data */}\n      {operation === 'fetch' && !error && <Loader />}\n\n      {/* Display message if no contacts */}\n      {visibleContacts.length === 0 ? (\n        <Typography\n          sx={{ my: 2 }}\n          fontSize=\"18px\"\n          color=\"#1976d2\"\n          fontWeight=\"700\"\n          paragraph\n          align=\"center\"\n        >\n          There are no contacts yet\n        </Typography>\n      ) : (\n        // Display the contact list\n        <ContactList />\n      )}\n    </Container>\n  );\n};\n\n// Export the Contacts component\nexport default Contacts;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizeFilter","toLowerCase","contact","name","includes","sort","a","b","localeCompare","ContactForm","dispatch","useDispatch","useSelector","operation","handleSubmit","e","preventDefault","form","currentTarget","elements","value","number","some","Notify","addContact","unwrap","reset","console","log","Container","maxWidth","sx","p","mb","bgcolor","borderRadius","boxShadow","Box","component","autoComplete","noValidate","onSubmit","TextField","margin","required","fullWidth","id","label","size","type","Button","variant","mt","Loader","Filter","Typography","fontSize","color","paragraph","my","onChange","updateFilter","style","position","top","left","transform","EditModal","isOpen","onClose","React","contactName","setContactName","contactNumber","setContactNumber","handleEdit","EditName","EditNumber","updateContact","contactId","Modal","open","width","xs","sm","target","Grid","container","justifyContent","mr","onClick","ContactItem","useState","isShowModal","setIsShowModal","handleDelete","deleteContact","toggleModal","prev","md","spacing","columns","item","textAlign","fontWeight","startIcon","Delete","Edit","ContactList","visibleContacts","map","useEffect","fetchContacts","marginTop","marginBottom","minHeight","Helmet","gutterBottom","length","align","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}